trigger:
  branches:
    include:
      - master

stages:
- stage: SecurityScan
  jobs:
  - job: GitleaksScan
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self
      persistCredentials: true
      fetchDepth: 0

    - task: Bash@3
      displayName: "Ensure Full Git Fetch"
      inputs:
        targetType: 'inline'
        script: |
          git config --global credential.helper store
          git fetch --unshallow || git fetch --all

    - task: Bash@3
      displayName: 'Install Gitleaks'
      inputs:
        targetType: 'inline'
        script: |
          GITLEAKS_VERSION="8.18.2"
          ARCH="x64"
          OS_TYPE="linux"

          echo "Installing Gitleaks v${GITLEAKS_VERSION}..."
          curl -sSL "https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_${OS_TYPE}_${ARCH}.tar.gz" -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz gitleaks
          sudo mv gitleaks /usr/local/bin/gitleaks
          gitleaks version

    - task: Bash@3
      displayName: 'Run Gitleaks on Modified, Staged & New Files'
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p /tmp/gitleaks_reports
          rm -rf /tmp/gitleaks_reports/*.json

          echo "Fetching full history..."
          git fetch --all
          git remote set-head origin -a
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d':' -f2 | tr -d ' ')
          echo "Using default branch: $DEFAULT_BRANCH"

          # Ensure we are on the correct branch and up to date
          git checkout $DEFAULT_BRANCH
          git pull origin $DEFAULT_BRANCH
          git checkout $BUILD_SOURCEVERSION

          # Get changed and untracked files
          DIFF_FILES=$(git diff --name-only origin/$DEFAULT_BRANCH...HEAD)
          UNTRACKED_FILES=$(git ls-files --others --exclude-standard)

          # Combine and clean
          CHANGED_FILES=$(echo -e "$DIFF_FILES\n$UNTRACKED_FILES" | sort -u | grep -v '\.tar\.gz$' || true)

          echo "=== Files to scan with Gitleaks ==="
          echo "$CHANGED_FILES"
          echo "==================================="

          if [ -z "$CHANGED_FILES" ]; then
            echo "No modified or new files detected. Skipping Gitleaks scan."
            echo "[]" > /tmp/gitleaks_reports/gitleaks_results.json
            exit 0
          fi

          # Run Gitleaks scan per file
          for file in $CHANGED_FILES; do
            if [ -f "$file" ]; then
              echo "Scanning: $file"
              cat "$file" | gitleaks detect --pipe \
                --report-path="/tmp/gitleaks_reports/gitleaks_results_$(basename "$file").json" || true
            else
              echo "Skipping missing file: $file"
            fi
          done

          # Merge results
          if compgen -G "/tmp/gitleaks_reports/gitleaks_results_*.json" > /dev/null; then
            jq -s '.' /tmp/gitleaks_reports/gitleaks_results_*.json > /tmp/gitleaks_reports/gitleaks_results.json
          else
            echo "[]" > /tmp/gitleaks_reports/gitleaks_results.json
          fi

          echo "Final Gitleaks Results:"
          cat /tmp/gitleaks_reports/gitleaks_results.json
